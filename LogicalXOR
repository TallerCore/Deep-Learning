{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPu/e6u20XCnQDmc/UTyIvY"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":29,"metadata":{"id":"-PFapYtNI_4b","executionInfo":{"status":"ok","timestamp":1663480950636,"user_tz":300,"elapsed":253,"user":{"displayName":"Carlos Severiano","userId":"11285351392204421599"}}},"outputs":[],"source":["import numpy as np\n","\n","def unit_step(v):\n","\t\"\"\" Heavyside Step function. v must be a scalar \"\"\"\n","\tif v >= 0:\n","\t\treturn 1\n","\telse:\n","\t\treturn 0\n","\t\n","def perceptron(x, w, b):\n","    \"\"\" Function implemented by a perceptron with \n","\t\tweight vector w and bias b \"\"\"\n","    v = np.dot(w, x) + b\n","    y = unit_step(v)\n","    return y\n","\n","def LogicalNOT(x):\n","\treturn perceptron(x, w=-1, b=0.5)\n","\n","def LogicalAND(x):\n","    w = np.array([1, 1])\n","    b = -1.5\n","    return perceptron(x, w, b)\n","\n","def LogicalOR(x):\n","    w = np.array([1, 1])\n","    b = -0.5\n","    return perceptron(x, w, b)"]},{"cell_type":"markdown","source":["$$\n","\\begin{aligned}\n","\\text{Tabla de verdad compuerta XOR}\n","\\end{aligned}\n","\\\\\n","\\begin{align*}\n","\\begin{array}{|c|c|c|}\n","\\hline \\text {x1} & \\text {x2} & \\text{y} \\\\\n","\\hline  1 & 1 & 0 \\\\\n","\\hline  1 & 0 & 1 \\\\\n","\\hline  0 & 1 & 1 \\\\\n","\\hline  0 & 0 & 0 \\\\\n","\\hline\n","\\end{array}\n","\\end{align*}\n","$$"],"metadata":{"id":"IkMphwUZJC_J"}},{"cell_type":"code","source":["def LogicalXOR(x):\n","    gate1 = LogicalAND(x)\n","    gate2 = LogicalNOT(gate1)\n","    gate3 = LogicalOR(x)\n","    xVal = np.array([gate2, gate3])\n","    output = LogicalAND(xVal)\n","    return output\n","\n","print(\"XOR({}, {}) = {}\".format(1, 1, LogicalXOR(np.array([1, 1]))))\n","print(\"XOR({}, {}) = {}\".format(1, 0, LogicalXOR(np.array([1, 0]))))\n","print(\"XOR({}, {}) = {}\".format(0, 1, LogicalXOR(np.array([0, 1]))))\n","print(\"XOR({}, {}) = {}\".format(0, 0, LogicalXOR(np.array([0, 0]))))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KwXIfGkhLRi-","executionInfo":{"status":"ok","timestamp":1663480951003,"user_tz":300,"elapsed":7,"user":{"displayName":"Carlos Severiano","userId":"11285351392204421599"}},"outputId":"e418d712-1518-40cb-f2f0-e2d32b53c9fa"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["XOR(1, 1) = 0\n","XOR(1, 0) = 1\n","XOR(0, 1) = 1\n","XOR(0, 0) = 0\n"]}]}]}