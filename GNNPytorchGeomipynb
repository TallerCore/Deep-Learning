{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyO0tpCrmylzs759o4r4ewDs"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IG6oSid-fmWc","outputId":"c857c2b6-e628-4029-cb01-09132c6488ca","executionInfo":{"status":"ok","timestamp":1663571086723,"user_tz":300,"elapsed":12406,"user":{"displayName":"José Ricardo Montiel Saldaña","userId":"01708661280823818950"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["1.12.1+cu113\n","\u001b[K     |████████████████████████████████| 3.5 MB 7.3 MB/s \n","\u001b[?25h  Building wheel for torch-geometric (setup.py) ... \u001b[?25l\u001b[?25hdone\n"]}],"source":["import os\n","import torch\n","os.environ['TORCH'] = torch.__version__\n","print(torch.__version__)\n","\n","!pip install -q torch-scatter -f https://data.pyg.org/whl/torch-${TORCH}.html\n","!pip install -q torch-sparse -f https://data.pyg.org/whl/torch-${TORCH}.html\n","!pip install -q git+https://github.com/pyg-team/pytorch_geometric.git"]},{"cell_type":"code","source":["# For all examples in this section we use the following imports.\n","# Note that we are using torch_geometric's DataLoader.\n","import torch\n","from torch_geometric.datasets import QM9\n","from torch_geometric.loader import DataLoader\n","from torch_geometric.nn import NNConv, global_add_pool\n","import torch.nn.functional as F\n","import torch.nn as nn\n","import numpy as np\n","# let's load the QM9 small molecule dataset\n","dset = QM9('.')\n","print(len(dset))\n","\n","# Here's how torch geometric wraps data\n","data = dset[0]\n","print(data)\n","# can access attributes directly\n","print(data.y)\n","# the atomic number of each atom can add attributes\n","data.new_attribute = torch.tensor([1, 2, 3])\n","data\n","# can move all attributes between devices\n","device = torch.device(\n","\"cuda:0\" if torch.cuda.is_available() else \"cpu\"\n",")\n","data.to(device)\n","data.new_attribute.is_cuda"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wZwsS82blBkB","executionInfo":{"status":"ok","timestamp":1663574693992,"user_tz":300,"elapsed":566,"user":{"displayName":"José Ricardo Montiel Saldaña","userId":"01708661280823818950"}},"outputId":"efa72da0-6c74-4f18-937e-9e065774c957"},"execution_count":38,"outputs":[{"output_type":"stream","name":"stdout","text":["130831\n","Data(x=[5, 11], edge_index=[2, 8], edge_attr=[8, 4], y=[1, 19], pos=[5, 3], idx=[1], name='gdb_1', z=[5])\n","tensor([[    0.0000,    13.2100,   -10.5499,     3.1865,    13.7363,    35.3641,\n","             1.2177, -1101.4878, -1101.4098, -1101.3840, -1102.0229,     6.4690,\n","           -17.1722,   -17.2868,   -17.3897,   -16.1519,   157.7118,   157.7100,\n","           157.7070]])\n"]},{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{},"execution_count":38}]},{"cell_type":"code","source":["class ExampleNet(torch.nn.Module):\n","    def __init__(self, num_node_features, num_edge_features):\n","        super().__init__()\n","        conv1_net = nn.Sequential(\n","        nn.Linear(num_edge_features, 32),\n","        nn.ReLU(),\n","        nn.Linear(32, num_node_features*32))\n","        conv2_net = nn.Sequential(\n","        nn.Linear(num_edge_features, 32),\n","        nn.ReLU(),\n","        nn.Linear(32, 32*16))\n","        self.conv1 = NNConv(num_node_features, 32, conv1_net)\n","        self.conv2 = NNConv(32,16, conv2_net)\n","        self.fc_1 = nn.Linear(16, 32)\n","        self.out = nn.Linear(32, 1)\n","    def forward(self, data):\n","        batch, x, edge_index, edge_attr = (\n","        data.batch, data.x, data.edge_index, data.edge_attr)\n","        # First graph conv layer\n","        x = F.relu(self.conv1(x, edge_index, edge_attr))\n","        # Second graph conv layer\n","        x = F.relu(self.conv2(x, edge_index, edge_attr))\n","        x = global_add_pool(x,batch)\n","        x = F.relu(self.fc_1(x))\n","        output = self.out(x)\n","        return output"],"metadata":{"id":"NTzsUPlOlisc","executionInfo":{"status":"ok","timestamp":1663571575668,"user_tz":300,"elapsed":255,"user":{"displayName":"José Ricardo Montiel Saldaña","userId":"01708661280823818950"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["from torch.utils.data import random_split\n","train_set, valid_set, test_set = random_split(\n","dset,[110000, 10831, 10000])\n","trainloader = DataLoader(train_set, batch_size=32, shuffle=True)\n","validloader = DataLoader(valid_set, batch_size=32, shuffle=True)\n","testloader = DataLoader(test_set, batch_size=32, shuffle=True)"],"metadata":{"id":"vXOfVDqol8ve","executionInfo":{"status":"ok","timestamp":1663573756438,"user_tz":300,"elapsed":232,"user":{"displayName":"José Ricardo Montiel Saldaña","userId":"01708661280823818950"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","metadata":{"id":"Qllhd5l9m2kv","colab":{"base_uri":"https://localhost:8080/","height":542},"executionInfo":{"status":"ok","timestamp":1663574270068,"user_tz":300,"elapsed":209,"user":{"displayName":"José Ricardo Montiel Saldaña","userId":"01708661280823818950"}},"outputId":"602bf54b-c7a6-4bec-e146-5f2aaf599427"},"source":["# This cell plots a molecule for us. Go ahead and try a couple of random molecules, it's fun!\n","import plotly.graph_objects as go\n","axis = dict(\n","    showbackground=False,\n","    showticklabels=False,\n","    showgrid=False,\n","    zeroline=False,\n","    title='',\n",")\n","layout = dict(\n","    showlegend=False,\n","    scene=dict(\n","        aspectmode=\"data\",\n","        xaxis=dict(\n","            **axis,\n","        ),\n","        yaxis=dict(\n","            **axis,\n","        ),\n","        zaxis=dict(\n","            **axis,\n","        ),\n","    ),\n","    paper_bgcolor=\"rgba(0,0,0,0)\",\n","    plot_bgcolor=\"rgba(0,0,0,0)\",\n","    margin=dict(l=0, r=0, t=0, b=0)\n",")\n","def visualise_molecule(graph):\n","  \"\"\" Plot a molecule based on a graph from QM9 \"\"\"\n","  pos = graph.pos.clone()\n","  edge_index = graph.edge_index\n","\n","  pos = (pos - pos.mean(0))/pos.std(0)\n","\n","  x = pos[:, 0]\n","  y = pos[:, 1]\n","  z = pos[:, 2]\n","  \n","  atom_type = (1+ graph.x[:, :5].argmax(-1))*10\n","  \n","  pos = pos[edge_index]\n","  data = [go.Scatter3d(x=x, y=y, z=z,mode='markers', marker=dict(size=atom_type, color=atom_type))]\n","  for i in range(edge_index.size(-1)):\n","    line_data = pos[:, i, :]\n","\n","    data.append(go.Scatter3d(x=line_data[:, 0], y=line_data[:, 1], z=line_data[:, 2], \n","                               mode=\"lines\", \n","                               line=dict(\n","                                     color='black',\n","                                     width=3,\n","                                 )\n","                               )\n","    )\n","\n","  fig = go.Figure(data=data, layout=layout)  \n","  return fig\n","#random_idx = np.random.randint(len(train_set)) \n","#graph = train_set[random_idx]\n","#print(train_set[random_idx])\n","fig = visualise_molecule(dset[0])\n","fig.show()"],"execution_count":37,"outputs":[{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"03aaff04-2e91-4ef4-9c6a-3650bea0d058\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"03aaff04-2e91-4ef4-9c6a-3650bea0d058\")) {                    Plotly.newPlot(                        \"03aaff04-2e91-4ef4-9c6a-3650bea0d058\",                        [{\"marker\":{\"color\":[20,10,10,10,10],\"size\":[20,10,10,10,10]},\"mode\":\"markers\",\"x\":[-3.1733859941596165e-05,0.023603208363056183,1.6249101161956787,-0.8377238512039185,-0.8107578754425049],\"y\":[1.8909533139321866e-07,-1.7318639755249023,0.5996012091636658,0.5737454891204834,0.5585174560546875],\"z\":[-3.1717561796540394e-05,-0.009549129754304886,-0.012245730496942997,-1.4032155275344849,1.4250421524047852],\"type\":\"scatter3d\"},{\"line\":{\"color\":\"black\",\"width\":3},\"mode\":\"lines\",\"x\":[-3.1733859941596165e-05,0.023603208363056183],\"y\":[1.8909533139321866e-07,-1.7318639755249023],\"z\":[-3.1717561796540394e-05,-0.009549129754304886],\"type\":\"scatter3d\"},{\"line\":{\"color\":\"black\",\"width\":3},\"mode\":\"lines\",\"x\":[-3.1733859941596165e-05,1.6249101161956787],\"y\":[1.8909533139321866e-07,0.5996012091636658],\"z\":[-3.1717561796540394e-05,-0.012245730496942997],\"type\":\"scatter3d\"},{\"line\":{\"color\":\"black\",\"width\":3},\"mode\":\"lines\",\"x\":[-3.1733859941596165e-05,-0.8377238512039185],\"y\":[1.8909533139321866e-07,0.5737454891204834],\"z\":[-3.1717561796540394e-05,-1.4032155275344849],\"type\":\"scatter3d\"},{\"line\":{\"color\":\"black\",\"width\":3},\"mode\":\"lines\",\"x\":[-3.1733859941596165e-05,-0.8107578754425049],\"y\":[1.8909533139321866e-07,0.5585174560546875],\"z\":[-3.1717561796540394e-05,1.4250421524047852],\"type\":\"scatter3d\"},{\"line\":{\"color\":\"black\",\"width\":3},\"mode\":\"lines\",\"x\":[0.023603208363056183,-3.1733859941596165e-05],\"y\":[-1.7318639755249023,1.8909533139321866e-07],\"z\":[-0.009549129754304886,-3.1717561796540394e-05],\"type\":\"scatter3d\"},{\"line\":{\"color\":\"black\",\"width\":3},\"mode\":\"lines\",\"x\":[1.6249101161956787,-3.1733859941596165e-05],\"y\":[0.5996012091636658,1.8909533139321866e-07],\"z\":[-0.012245730496942997,-3.1717561796540394e-05],\"type\":\"scatter3d\"},{\"line\":{\"color\":\"black\",\"width\":3},\"mode\":\"lines\",\"x\":[-0.8377238512039185,-3.1733859941596165e-05],\"y\":[0.5737454891204834,1.8909533139321866e-07],\"z\":[-1.4032155275344849,-3.1717561796540394e-05],\"type\":\"scatter3d\"},{\"line\":{\"color\":\"black\",\"width\":3},\"mode\":\"lines\",\"x\":[-0.8107578754425049,-3.1733859941596165e-05],\"y\":[0.5585174560546875,1.8909533139321866e-07],\"z\":[1.4250421524047852,-3.1717561796540394e-05],\"type\":\"scatter3d\"}],                        {\"margin\":{\"b\":0,\"l\":0,\"r\":0,\"t\":0},\"paper_bgcolor\":\"rgba(0,0,0,0)\",\"plot_bgcolor\":\"rgba(0,0,0,0)\",\"scene\":{\"aspectmode\":\"data\",\"xaxis\":{\"showbackground\":false,\"showgrid\":false,\"showticklabels\":false,\"title\":{\"text\":\"\"},\"zeroline\":false},\"yaxis\":{\"showbackground\":false,\"showgrid\":false,\"showticklabels\":false,\"title\":{\"text\":\"\"},\"zeroline\":false},\"zaxis\":{\"showbackground\":false,\"showgrid\":false,\"showticklabels\":false,\"title\":{\"text\":\"\"},\"zeroline\":false}},\"showlegend\":false,\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}}},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('03aaff04-2e91-4ef4-9c6a-3650bea0d058');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}}]},{"cell_type":"code","source":["# initialize a network\n","qm9_node_feats, qm9_edge_feats = 11, 4\n","net = ExampleNet(qm9_node_feats, qm9_edge_feats)\n","# initialize an optimizer with some reasonable parameters\n","optimizer = torch.optim.Adam(\n","net.parameters(), lr=0.01)\n","epochs = 4\n","target_idx = 1 # index position of the polarizability label\n","device = torch.device(\"cuda:0\" if\n","torch.cuda.is_available() else \"cpu\")\n","net.to(device)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"t6AtErnymD7h","executionInfo":{"status":"ok","timestamp":1663571622014,"user_tz":300,"elapsed":174,"user":{"displayName":"José Ricardo Montiel Saldaña","userId":"01708661280823818950"}},"outputId":"4656e309-37b6-4bde-a26e-591eb37ce221"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["ExampleNet(\n","  (conv1): NNConv(11, 32, aggr=add, nn=Sequential(\n","    (0): Linear(in_features=4, out_features=32, bias=True)\n","    (1): ReLU()\n","    (2): Linear(in_features=32, out_features=352, bias=True)\n","  ))\n","  (conv2): NNConv(32, 16, aggr=add, nn=Sequential(\n","    (0): Linear(in_features=4, out_features=32, bias=True)\n","    (1): ReLU()\n","    (2): Linear(in_features=32, out_features=512, bias=True)\n","  ))\n","  (fc_1): Linear(in_features=16, out_features=32, bias=True)\n","  (out): Linear(in_features=32, out_features=1, bias=True)\n",")"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["for total_epochs in range(epochs):\n","\tepoch_loss = 0\n","\ttotal_graphs = 0\n","\tnet.train()\n","\tfor batch in trainloader:\n","\t\tbatch.to(device)\n","\t\toptimizer.zero_grad()\n","\t\toutput = net(batch)\n","\t\tloss = F.mse_loss(\n","\t\toutput,batch.y[:, target_idx].unsqueeze(1))\n","\t\tloss.backward()\n","\t\tepoch_loss += loss.item()\n","\t\ttotal_graphs += batch.num_graphs\n","\t\toptimizer.step()\n","\ttrain_avg_loss = epoch_loss / total_graphs\n","\tval_loss = 0\n","\ttotal_graphs = 0\n","\tnet.eval()\n","\tfor batch in validloader:\n","\t\tbatch.to(device)\n","\t\toutput = net(batch)\n","\t\tloss = F.mse_loss(\n","\t\toutput,batch.y[:, target_idx].unsqueeze(1))\n","\t\tval_loss += loss.item()\n","\t\ttotal_graphs += batch.num_graphs\n","\tval_avg_loss = val_loss / total_graphs\n","\tprint(f\"Epochs: {total_epochs} | \"\n","\tf\"epoch avg. loss: {train_avg_loss:.2f} | \"\n","\tf\"validation avg. loss: {val_avg_loss:.2f}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Vbl90iUNmXFu","executionInfo":{"status":"ok","timestamp":1663571978990,"user_tz":300,"elapsed":291375,"user":{"displayName":"José Ricardo Montiel Saldaña","userId":"01708661280823818950"}},"outputId":"4643ff7b-7298-40c3-b3ef-ef4a7d74f955"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["Epochs: 0 | epoch avg. loss: 0.72 | validation avg. loss: 0.20\n","Epochs: 1 | epoch avg. loss: 0.14 | validation avg. loss: 0.08\n","Epochs: 2 | epoch avg. loss: 0.11 | validation avg. loss: 0.18\n","Epochs: 3 | epoch avg. loss: 0.10 | validation avg. loss: 0.07\n"]}]},{"cell_type":"code","source":["net.eval()\n","predictions = []\n","real = []\n","for batch in testloader:\n","    output = net(batch.to(device))\n","    predictions.append(output.detach().cpu().numpy())\n","    real.append(batch.y[:,target_idx] .detach().cpu().numpy())\n","real = np.concatenate(real)\n","predictions = np.concatenate(predictions)"],"metadata":{"id":"zp7dUs2RnXpP","executionInfo":{"status":"ok","timestamp":1663571993139,"user_tz":300,"elapsed":3493,"user":{"displayName":"José Ricardo Montiel Saldaña","userId":"01708661280823818950"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","plt.scatter(real[:500], predictions[:500])\n","plt.xlabel('Isotropic polarizability')\n","plt.ylabel('Predicted isotropic polarizability')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":297},"id":"44v0RYqrnjng","executionInfo":{"status":"ok","timestamp":1663572011883,"user_tz":300,"elapsed":716,"user":{"displayName":"José Ricardo Montiel Saldaña","userId":"01708661280823818950"}},"outputId":"7c4a125f-b3c3-471a-d6a8-53b24ea393d7"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0, 0.5, 'Predicted isotropic polarizability')"]},"metadata":{},"execution_count":20},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]}]}